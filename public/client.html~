<html>
<head>
 <script type="text/javascript" src="sjcl.js"></script>
 <script type="text/javascript" src="bundle.js"></script>
 <script type="text/javascript" src="itemKNN.js"></script> 
 <script type="text/javascript" src="sjbn.js"></script>

 <script src="/socket.io/socket.io.js"></script>
</head>

<body>
<div id="log"></div>

 
  <script>
  window.onload = function(){
  
	function sample_geom(p){return Math.ceil( Math.log(1-Math.random()) / Math.log(1-p) ) };
 
	function encrypt(array,g,k,p){	
		return array.map( function( a ){ return g.modPow( k.add( new BigInteger(a.toString()) ) , p ).toString() } ) 
	}  
  
  	var d = new Date();
			
  	//connection
  	try{
		var socket = io();
	}
	catch(err) { alert("Server not found")}
			
	//registration
	socket.emit("add-user", {"username": d.toISOString()});
	
	
	socket.on("message", function (message) {
		
		var params = { };
		var aggregated_sketch = {};
        	switch(message.event) {
        	
        	case 'share':
        		params = message.data
        		
        		// sketch generation
			var createCountMinSketch = require('count-min').createCountMinSketch;
			var sketch = createCountMinSketch(parseFloat(params.accuracy), parseFloat(params.probIncorrect), parseInt(params.samples));
			for (var i = 0; i < params.samples; i++ )
				sketch.update(i, sample_geom(0.3)%2);
			
			var json_sketch = sketch.toJSON();
			
			console.log(json_sketch);
			
			//sketch encryption
			console.log("--Encryption phase")
			json_sketch.table = encrypt(json_sketch.table, new BigInteger(params.g), new BigInteger(params.share), new BigInteger(params.p) );
			
			console.log("--Data encrypted")
			//sketch
			socket.emit("user-view",{"username" : d.toISOString(), "sketch" : json_sketch});
			console.log("--Data sent to the aggregator")
        	break;
        
        	}
             
        });
         	
        socket.on("model",function(message){
        
        	var params = message.params;
        	var createCountMinSketch = require('count-min').createCountMinSketch;
        	var aggregated_sketch = createCountMinSketch(params.accuracy, params.probIncorrect, params.samples);
        	
        	aggregated_sketch.fromJSON(message.data);
        	console.log("--Aggregate data received");
        	
        	var n = Math.sqrt(params.samples*2);
        	var simMatrix  = require('itemKNN').NNmodelBuilding(aggregated_sketch, n )
        	console.log(simMatrix);
        	// new observation
		var feedback = [ ];
		for (var i = 0; i < n; i++) {
		    feedback[i] = [ ];
		    for(var j = 0; j <= i; j++) {
		        feedback[i][j] = feedback[j][i] = sample_geom(0.3) % 2;
		    }
		}
		
        	var topNN = 10;
        	var topKNN = require('itemKNN').NNprediction(feedback,simMatrix,topNN);
		
		console.log("--Top",topNN,"recommendation items:",topKNN);
        		
        });
         
	//case of too many connections
	socket.on("too-many-connections",function(){console.log("too many connections"); return 1;});
	
	socket.on("disconnect",function(){console.log("--Disconnected!..");socket.destroy()});
	socket.on("error",function(){console.log("--Error");socket.destroy()})
	}
  </script>
</body>
</html>
